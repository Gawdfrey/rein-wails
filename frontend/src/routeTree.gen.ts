/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as SolutionsIndexImport } from './routes/solutions/index'
import { Route as SettingsIndexImport } from './routes/settings/index'
import { Route as ModulesIndexImport } from './routes/modules/index'
import { Route as SolutionsIdImport } from './routes/solutions.$id'
import { Route as ModulesModuleIdImport } from './routes/modules/$moduleId'
import { Route as SolutionsSolutionIdIndexImport } from './routes/solutions/$solutionId/index'
import { Route as SolutionsSolutionIdEnvironmentsEnvironmentIdImport } from './routes/solutions/$solutionId/environments/$environmentId'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const SolutionsIndexRoute = SolutionsIndexImport.update({
  id: '/solutions/',
  path: '/solutions/',
  getParentRoute: () => rootRoute,
} as any)

const SettingsIndexRoute = SettingsIndexImport.update({
  id: '/settings/',
  path: '/settings/',
  getParentRoute: () => rootRoute,
} as any)

const ModulesIndexRoute = ModulesIndexImport.update({
  id: '/modules/',
  path: '/modules/',
  getParentRoute: () => rootRoute,
} as any)

const SolutionsIdRoute = SolutionsIdImport.update({
  id: '/solutions/$id',
  path: '/solutions/$id',
  getParentRoute: () => rootRoute,
} as any)

const ModulesModuleIdRoute = ModulesModuleIdImport.update({
  id: '/modules/$moduleId',
  path: '/modules/$moduleId',
  getParentRoute: () => rootRoute,
} as any)

const SolutionsSolutionIdIndexRoute = SolutionsSolutionIdIndexImport.update({
  id: '/solutions/$solutionId/',
  path: '/solutions/$solutionId/',
  getParentRoute: () => rootRoute,
} as any)

const SolutionsSolutionIdEnvironmentsEnvironmentIdRoute =
  SolutionsSolutionIdEnvironmentsEnvironmentIdImport.update({
    id: '/solutions/$solutionId/environments/$environmentId',
    path: '/solutions/$solutionId/environments/$environmentId',
    getParentRoute: () => rootRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/modules/$moduleId': {
      id: '/modules/$moduleId'
      path: '/modules/$moduleId'
      fullPath: '/modules/$moduleId'
      preLoaderRoute: typeof ModulesModuleIdImport
      parentRoute: typeof rootRoute
    }
    '/solutions/$id': {
      id: '/solutions/$id'
      path: '/solutions/$id'
      fullPath: '/solutions/$id'
      preLoaderRoute: typeof SolutionsIdImport
      parentRoute: typeof rootRoute
    }
    '/modules/': {
      id: '/modules/'
      path: '/modules'
      fullPath: '/modules'
      preLoaderRoute: typeof ModulesIndexImport
      parentRoute: typeof rootRoute
    }
    '/settings/': {
      id: '/settings/'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsIndexImport
      parentRoute: typeof rootRoute
    }
    '/solutions/': {
      id: '/solutions/'
      path: '/solutions'
      fullPath: '/solutions'
      preLoaderRoute: typeof SolutionsIndexImport
      parentRoute: typeof rootRoute
    }
    '/solutions/$solutionId/': {
      id: '/solutions/$solutionId/'
      path: '/solutions/$solutionId'
      fullPath: '/solutions/$solutionId'
      preLoaderRoute: typeof SolutionsSolutionIdIndexImport
      parentRoute: typeof rootRoute
    }
    '/solutions/$solutionId/environments/$environmentId': {
      id: '/solutions/$solutionId/environments/$environmentId'
      path: '/solutions/$solutionId/environments/$environmentId'
      fullPath: '/solutions/$solutionId/environments/$environmentId'
      preLoaderRoute: typeof SolutionsSolutionIdEnvironmentsEnvironmentIdImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/modules/$moduleId': typeof ModulesModuleIdRoute
  '/solutions/$id': typeof SolutionsIdRoute
  '/modules': typeof ModulesIndexRoute
  '/settings': typeof SettingsIndexRoute
  '/solutions': typeof SolutionsIndexRoute
  '/solutions/$solutionId': typeof SolutionsSolutionIdIndexRoute
  '/solutions/$solutionId/environments/$environmentId': typeof SolutionsSolutionIdEnvironmentsEnvironmentIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/modules/$moduleId': typeof ModulesModuleIdRoute
  '/solutions/$id': typeof SolutionsIdRoute
  '/modules': typeof ModulesIndexRoute
  '/settings': typeof SettingsIndexRoute
  '/solutions': typeof SolutionsIndexRoute
  '/solutions/$solutionId': typeof SolutionsSolutionIdIndexRoute
  '/solutions/$solutionId/environments/$environmentId': typeof SolutionsSolutionIdEnvironmentsEnvironmentIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/modules/$moduleId': typeof ModulesModuleIdRoute
  '/solutions/$id': typeof SolutionsIdRoute
  '/modules/': typeof ModulesIndexRoute
  '/settings/': typeof SettingsIndexRoute
  '/solutions/': typeof SolutionsIndexRoute
  '/solutions/$solutionId/': typeof SolutionsSolutionIdIndexRoute
  '/solutions/$solutionId/environments/$environmentId': typeof SolutionsSolutionIdEnvironmentsEnvironmentIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/modules/$moduleId'
    | '/solutions/$id'
    | '/modules'
    | '/settings'
    | '/solutions'
    | '/solutions/$solutionId'
    | '/solutions/$solutionId/environments/$environmentId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/modules/$moduleId'
    | '/solutions/$id'
    | '/modules'
    | '/settings'
    | '/solutions'
    | '/solutions/$solutionId'
    | '/solutions/$solutionId/environments/$environmentId'
  id:
    | '__root__'
    | '/'
    | '/modules/$moduleId'
    | '/solutions/$id'
    | '/modules/'
    | '/settings/'
    | '/solutions/'
    | '/solutions/$solutionId/'
    | '/solutions/$solutionId/environments/$environmentId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ModulesModuleIdRoute: typeof ModulesModuleIdRoute
  SolutionsIdRoute: typeof SolutionsIdRoute
  ModulesIndexRoute: typeof ModulesIndexRoute
  SettingsIndexRoute: typeof SettingsIndexRoute
  SolutionsIndexRoute: typeof SolutionsIndexRoute
  SolutionsSolutionIdIndexRoute: typeof SolutionsSolutionIdIndexRoute
  SolutionsSolutionIdEnvironmentsEnvironmentIdRoute: typeof SolutionsSolutionIdEnvironmentsEnvironmentIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ModulesModuleIdRoute: ModulesModuleIdRoute,
  SolutionsIdRoute: SolutionsIdRoute,
  ModulesIndexRoute: ModulesIndexRoute,
  SettingsIndexRoute: SettingsIndexRoute,
  SolutionsIndexRoute: SolutionsIndexRoute,
  SolutionsSolutionIdIndexRoute: SolutionsSolutionIdIndexRoute,
  SolutionsSolutionIdEnvironmentsEnvironmentIdRoute:
    SolutionsSolutionIdEnvironmentsEnvironmentIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/modules/$moduleId",
        "/solutions/$id",
        "/modules/",
        "/settings/",
        "/solutions/",
        "/solutions/$solutionId/",
        "/solutions/$solutionId/environments/$environmentId"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/modules/$moduleId": {
      "filePath": "modules/$moduleId.tsx"
    },
    "/solutions/$id": {
      "filePath": "solutions.$id.tsx"
    },
    "/modules/": {
      "filePath": "modules/index.tsx"
    },
    "/settings/": {
      "filePath": "settings/index.tsx"
    },
    "/solutions/": {
      "filePath": "solutions/index.tsx"
    },
    "/solutions/$solutionId/": {
      "filePath": "solutions/$solutionId/index.tsx"
    },
    "/solutions/$solutionId/environments/$environmentId": {
      "filePath": "solutions/$solutionId/environments/$environmentId.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
